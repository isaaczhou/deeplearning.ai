* Neural Networks and Deep Learning
** Logistics Regression as a Neural Network
*** Binary Classification
*** Logistic Regression
*** Logistic Regression Cost Function
*** Gradient Descent
*** Derivatives
*** More Derivative Examples
*** Computation Graph
*** Derivatives with a Computation Graph
*** Logistic Regression Gradient Descent
*** Gradient Descent on m Examples
** Python and Vectorization
*** Vectorization
**** What is vectorization?
1. In logistic regression, we need to calculate
\begin{equation}
Z = w^Tx + b
\end{equation}
where,
\begin{equation}
\[
w=
  \begin{bmatrix}
    w_1 \\
    w_2 \\
    w_3 \\
    ...
  \end{bmatrix}
\]
\end{equation} and \begin{equation}
\[
x=
  \begin{bmatrix}
   x_1 \\
   x_2 \\
   x_3 \\
    ...
  \end{bmatrix}
\]
\end{equation}

| Non-Vectorized   | Vectorized        |
|------------------+-------------------|
| Inefficient      | much faster       |
| z = 0            | z = np.dot(w,x)+b |
| for i in range:  |                   |
| z += w[i] * x[i] |                   |
| z += b           |                   |
**** Demo

#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
import numpy as np
import time

a = np.random.rand(1000000)
b = np.random.rand(1000000)

tic = time.time()
c = np.dot(a,b)
toc = time.time()

print("Vectorized Version: "+ str((toc - tic) * 1000) + "ms")
print(c)

z = 0
tic = time.time()
for i in range(1000000):
    z += a[i] * b [i]
toc = time.time()

print("None Vectorized Version: " + str((toc -  tic) * 1000) + "ms")
print(z)

#+END_SRC

#+RESULTS:
:RESULTS:
:END:

*Takeaway: avoid for loops and use vectorization if possible*

*** Vectorizing Logistic Regression

*** Vectorizing Logistic Regression's Gradient

*** Broadcasting in Python

#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
#import numpy as np
food_matrix = np.matrix([[56, 0, 4.4, 68],[1.2, 104, 52, 8],[1.8, 135, 99, 0.9]])
food_matrix_sum = food_matrix.sum(axis=0)
print(food_matrix_sum)
print("=============================")
food_matrix_per = 100 * food_matrix / food_matrix_sum
print(food_matrix_per)

a = np.random.randn(5)
a.shape
print(np.dot(a, a.T))

b = np.random.randn(5,1)
b.shape
print(np.dot(b, b.T))
b.reshape(1,5)
#+END_SRC

#+RESULTS:
:RESULTS:
array([[-0.27075298,  1.44362395,  1.51302792, -0.49571861,  0.17513464]])
:END:

*** Logistic Regression Cost Function

#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
a = np.random.randn(3, 3)
b = np.random.randn(3, 1)
c = a*b
c
#+END_SRC

#+RESULTS:
:RESULTS:
array([[-1.48067559,  0.18952616,  0.26303   ],
       [ 2.24053139, -1.44789571,  0.20761107],
       [ 3.1013735 , -5.05015252, -0.63802527]])
:END:
